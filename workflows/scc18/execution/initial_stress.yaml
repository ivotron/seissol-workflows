!EvalModel
parameters: [s_zz, b_xx, b_yy, b_xy, b_yz, b_xz, Pf, Omega]
model: !Switch
  [s_zz]: !LayeredModel
    map: !AffineMap
      matrix:
        z: [0.0, 0.0, 1.0]
      translation:
        z: 0
    interpolation: linear
    parameters: [s_zz]
    nodes:
      0.0: [0.0]
      -2000.0: [-19600000.0]
      -6000.0: [-126224000.0]
      -12000.0: [-294392000.0]
      -23000.0: [-623182000.0]
      -100000.0: [-3113362000.0]
  [b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]: !EvalModel
    parameters: [strike]
    model: !AffineMap
      matrix:
        yx: [-1.0, 1.0, 0.0]
      translation:
        yx: 0
      components:
        - !AxisAlignedCuboidalDomainFilter
          limits:
            yx: [-.inf, -57872.60975] # yS1 - xS1 = 4.4212739025e+05 - 5.0000000000e+05
          components: !ConstantMap
            map:
              strike: 309
        - !AxisAlignedCuboidalDomainFilter
          limits:
            yx: [-.inf, 163340.86754] # yS2 - xS2 = 6.0795713230e+05 - 4.4461626476e+05
          components: !FunctionMap
            map:      # alpha = ((y-x)-(yS1-xS1)) / ((yS2-xS2)-(yS1-xS1))
              strike: |
                alpha = (yx+57872.60975)/221213.47729;
                return (1.0-alpha)*309.0+alpha*330.0;
        - !ConstantMap
          map:
            strike: 330
    components: !STRESS_STR_DIP_SLIP_AM
      constants:
        mu_d:     0.25
        mu_s:     0.3
        dip:      8
        s_zz:     555562000
        cohesion: 0.4e6
        R:        0.7
        DipSlipFaulting:  1.0
        s2ratio:  0.5
  [Pf, Omega]: !FunctionMap
    map:
      Pf: |
        alpha = 0.0;
        if (z >= -5000.0) {
          alpha = 0.0;
        } else {
          if (z >= -10000.0) {
            alpha = -1.0-z/5000.0;
          } else {
            alpha = 1.0;
          }
        }
        return -1000.0 * 9.8 * z * (1.0 + alpha);
      Omega: |
        if (z < -25000.0) {
          Rz = (-z-25000.0) / 150000.0;
          return max(0.0, min(1.0, 1.0-Rz));
        }
        return 1.0;
components: !FunctionMap
  map:
    s_zz:     return Pf + s_zz;
    s_xx:     return Pf + Omega*(b_xx*(s_zz+Pf)-Pf)+(1.0-Omega)*s_zz;
    s_yy:     return Pf + Omega*(b_yy*(s_zz+Pf)-Pf)+(1.0-Omega)*s_zz;
    s_xy:     return Omega*(b_xy*(s_zz+Pf));
    s_yz:     return Omega*(b_yz*(s_zz+Pf));
    s_xz:     return Omega*(b_xz*(s_zz+Pf));
    plastCo:  return 0.001*(Pf + s_zz);

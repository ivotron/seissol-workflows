#! /usr/bin/python
##
# @file
# This file is part of SeisSol.
#
# @author Alexander Breuer (breuer AT mytum.de, http://www5.in.tum.de/wiki/index.php/Dipl.-Math._Alexander_Breuer)
# @author Sebastian Rettenberger (rettenbs AT in.tum.de, http://www5.in.tum.de/wiki/index.php/Sebastian_Rettenberger,_M.Sc.)
#
# @section LICENSE
# Copyright (c) 2013, SeisSol Group
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# operation system (required for exectuion environment)
import os
import sys

# Check if we the user wants to show help only
if '-h' in sys.argv or '--help' in sys.argv:
  helpMode = True
else:
  helpMode = False
  
def ConfigurationError(msg):
    """Print the error message and exit. Continue only
    if the user wants to show the help message"""
    
    if not helpMode:
        print msg
        Exit(1) 

#
# set possible variables
#
vars = Variables()

# read parameters from a file if given
vars.AddVariables(
  PathVariable( 'buildVariablesFile', 'location of the python file, which contains the build variables', None, PathVariable.PathIsFile )
)
env = Environment(variables=vars)
if 'buildVariablesFile' in env:
  vars = Variables(env['buildVariablesFile'])

# SeisSol specific variables
vars.AddVariables(
  PathVariable( 'buildDir', 'where to build the code', 'build', PathVariable.PathIsDirCreate ),
  
  EnumVariable( 'compileMode', 'mode of the compilation', 'release',
                allowed_values=('debug', 'release')
              ),

  EnumVariable( 'parallelization', 'level of parallelization', 'mpi',
                allowed_values=('none', 'mpi')
              ),

  BoolVariable( 'useMPIAbort', 'MPI_Abort might not compile with some shells/MPI libraries', True ),

  BoolVariable( 'unitTests', 'builds additional unit tests.', False ),

  EnumVariable( 'logLevel',
                'logging level. \'debug\' runs assertations and prints all information available, \'info\' prints information at runtime (time step, plot number), \'warning\' prints warnings during runtime, \'error\' is most basic and prints errors only',
                'info',
                allowed_values=('debug', 'info', 'warning', 'error')
              )
)

# external variables
vars.AddVariables(
  PathVariable( 'netcdfDir',
                'NetCDF installation directory',
                None,
                PathVariable.PathAccept ),
                  
  PathVariable( 'hdf5Dir',
                'HDF5 installation directory',
                None,
                PathVariable.PathAccept ),
                  
  PathVariable( 'zlibDir',
                'zlib installation directory',
                None,
                PathVariable.PathAccept ),
                     
  PathVariable( 'cppCompiler',
                'C++ compiler (default: icpc (serial), mpiCC (parallel).',
                None,
                PathVariable.PathAccept ),

  BoolVariable( 'useExecutionEnvironment',
                'set variables set in the execution environment ($PATH, $LIBRARY_PATH, $LD_LIBRARY_PATH, $CPLUS_INCLUDE_PATH, $INTEL_LICENSE_FILE, $OMPI_FC, $OMPI_CXX)',
                True )
)

# set environment
env = Environment(variables=vars)

if env['useExecutionEnvironment'] == True:
  if 'PATH' in os.environ:
    env.AppendENVPath( 'PATH', os.environ['PATH'] )
  if 'LIBRARY_PATH' in os.environ:
    env.AppendENVPath( 'LIBRARY_PATH', os.environ['LIBRARY_PATH'] )
    env.Append(RPATH=[os.environ['LIBRARY_PATH']])
  if 'LD_LIBRARY_PATH' in os.environ:
    env.AppendENVPath( 'LD_LIBRARY_PATH', os.environ['LD_LIBRARY_PATH'] )
  if 'CPLUS_INCLUDE_PATH' in os.environ:
    env.AppendENVPath( 'CPLUS_INCLUDE_PATH', os.environ['CPLUS_INCLUDE_PATH'] )
  if 'INTEL_LICENSE_FILE' in os.environ:
    env['ENV']['INTEL_LICENSE_FILE'] = os.environ['INTEL_LICENSE_FILE']
  if 'OMPI_FC' in os.environ:
    env['ENV']['OMPI_FC'] = os.environ['OMPI_FC']
  if 'OMPI_CXX' in os.environ:
    env['ENV']['OMPI_CXX'] = os.environ['OMPI_CXX']


# generate help text
Help(vars.GenerateHelpText(env))
if helpMode:
  import SCons
  print SCons.Script.help_text
  env.Exit()

# handle unknown, maybe misspelled variables
unknownVariables = vars.UnknownVariables()

# remove the buildVariablesFile from the list of unknown variables (used before)
if 'buildVariablesFile' in unknownVariables:
  unknownVariables.pop('buildVariablesFile')

# exit in the case of unknown variables
if unknownVariables:
  ConfigurationError("*** The following build variables are unknown: " + str(unknownVariables.keys()))
  
if env['parallelization'] != 'mpi':
  ConfigurationError("*** Only MPI parallelization is currently supported")

#
# precompiler, compiler and linker flags
#

# set compilers
if 'cppCompiler' in env:
  cppCompiler = env['cppCompiler']
else:
  if env['parallelization'] == 'mpi':
    cppCompiler = 'mpiCC'
  else:
    cppCompiler = 'icpc'

# set compiler and linker environment variables
for mode in ['CC', 'CXX']:
  env[mode]   = cppCompiler
  
  # set (pre-)compiler flags for the compile modes
if env['compileMode'] == 'debug':
    env.Append(CXXFLAGS=['-g'])
elif env['compileMode'] == 'release':
    env.Append(CPPDEFINES=['NDEBUG'])
    env.Append(CXXFLAGS=['-O3'])
    
# SeisSol compatibility
env.Append(CPPDEFINES=['PARALLEL'])
  
#
# Configure Logger
#
if env['parallelization'] == 'mpi':
  if env['useMPIAbort']:
    env.Append(CPPDEFINES=['LOG_ABORT=MPI_Abort\(MPI_COMM_WORLD,-1\)'])
# set level of logger
if env['logLevel'] == 'debug':
  env.Append(CPPDEFINES=['LOG_LEVEL=3'])
elif env['logLevel'] == 'info':
  env.Append(CPPDEFINES=['LOG_LEVEL=2'])
elif env['logLevel'] == 'warning':
  env.Append(CPPDEFINES=['LOG_LEVEL=1'])
elif env['logLevel'] == 'error':
  env.Append(CPPDEFINES=['LOG_LEVEL=0'])
else:
  assert(false)
  
#
# Additional Libraries
#
env.Tool('DirTool')

# netCDF
env.Tool('NetcdfTool', parallel=True, required=True)

#
# setup the program name and the build directory
#
# compile mode
program_name = '_'+env['compileMode']

# build directory
env['buildDir'] = env['buildDir']+'/build'+program_name

# Set include directory for all subdirectories
env.Append(CPPPATH=['#/src'])

# get the source files
env.sourceFiles = []

Export('env')
SConscript('src/SConscript', variant_dir='#/'+env['buildDir'], src_dir='#/', duplicate=0)
Import('env')

# build standard version
env.Program('#build/SeisSol_gambit2netcdf'+program_name, env.sourceFiles)
    

# Workflow automation of SeisSol
* Contact: Alex Breuer (breuer@mytum.de)

## General
The workflow system contains of three separate phases
* Setup phase: In this phase all the directory structure is set up and the code is build
* Benchmark phase: This phase operates on a finished setup phase and submits all configuration set up to the queuing system.
* Analyze phase: The phase takes finished runs and analyzes them; for example for verification runs comparison plots of receivers are possible or for convergence plots for convergence runs

## Benchmark Setup
Each of the benchmarks is expected to fulfill a certain requirements (all located in the directory setup of the benchmark):
* parameters.template: The template for SeisSol's parameter files contains the usual parameter-file with parameters exchanged by the workflow management system annotated with tags, tags are:
 * MESH_BASE_NAME_TAG: Gets replaced by the specified mesh file
 * MESH_FORMAT_TAG: Gets replaced by the requested mesh format, for example "Gambit3D-fast" or "Netcdf"
 * ORDER_TAG: Gets replaced by the order of convergence
* In addition all files which might be required throughout the benchmark phase of the workflows have to be provided; for example: mesh files or partitions
* Gambit partitions have to follow the naming scheme ${MESH_NAME}.met.epart.${NUMBER_OF_PARTITIONS} with ${MESH_NAME} being the equivalent of the mesh file ${MESH_NAME}.neu and the number of partitions being any possible number of mpi rank appearing in the benchmark phase
* For netCDF the naming scheme is ${MESH_NAME}_${NUMBER_OF_PARTITIONS}.nc

## Verification
* TODO: Write some more text; see directory references in the benchmark directory

## Setting up Workflows
* Example setups for the MAC-Cluster (Slurm) and SuperMIC (LoadLeveler) are located in configurations
* Each machine-specific contains of a specification for all workflows; e.g. mac_cluster/workflows.xml or supermic/workflows.xml
 * Each workflow consist of a build configuration and a benchmark configuration
 * The verification runs for wave propagation on KNC and the MAC-Cluster for example have a build-configuration at mac_cluster/builds/wave_propagation_knx.xml and a benchmark configuration at mac_cluster/benchmarks/wave_propagation_knc.sh
* The build configuration contains all parameters which are passed to SeisSol's build script in the setup phase of the workflow
 * White-space separated lists of different parameters are possible; for example -- order = "2 3 4 5 6 7" -- will build the code for orders 2-6
 * Multiple white-space lists are also allowed: If for example in addition to the orders of the previous point the compile mode is set to debug and release -- compile_mode = "debug release" -- the code will be build in debug and release mode for orders 2-6 in the setup phase of the workflow
* The benchmark configuration contains a unique list of all desired benchmarks
* Adjustment of environment variables (loaded before every build and run) is possible via the shell script "input/env_vars.sh", per default scripts in "${HOME}/env_vars_mic.sh" and "${HOME}/env_vars.sh" are run
* Note that ${TMPDIR} is used as scratch for building the code and only the executables are copied back to the workflow directory afterwards
* In the run-phase the workflow will runs all benchmarks for all specified build-configuration

## Generation and execution of workflows
* Use the entry point "generate.py" to generate you workflows (pointing to your workflow collection)
* After running the script a shell script for every workflow is generated
* Use the shell script to run your workflow; see --help for details. "-s" will run the setup phase, "-b" the benchmark phase and "-a" the analyze phase (should be run after some benchmarks are finished)
* It is advisable to use a compute node for non-trivial workflows in the setup and analyze phase, because all build and analysis is done in parallel.
